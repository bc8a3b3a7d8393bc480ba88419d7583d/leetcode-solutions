[
    {
        "question_id": "131",
        "title_slug": "palindrome-partitioning",
        "content": "",
        "typed_code": "\n        function partition(s) {\n            const res = [];\n            const part = [];\n            function isPalindrome(s, l, r) {\n                while (l < r) {\n                    if (s[l] !== s[r]) return false;\n                    l++;\n                    r--;\n                }\n                return true;\n            }\n            function dfs(i) {\n                if (i >= s.length) {\n                    res.push([...part]);\n                    return;\n                }\n                for (let j = i; j < s.length; j++) {\n                    if (isPalindrome(s, i, j)) {\n                        part.push(s.slice(i, j + 1));\n                        dfs(j + 1);\n                        part.pop();\n                    }\n                }\n            }\n            dfs(0);\n            return res;\n        }\n        "
    },
    {
        "question_id": "132",
        "title_slug": "palindrome-partitioning-ii",
        "content": "",
        "typed_code": "\n        function minCut(s) {\n            const n = s.length;\n            const dp = Array(n).fill(Infinity);\n            const pal = Array.from({ length: n }, () => Array(n).fill(false));\n\n            for (let i = 0; i < n; i++) {\n                pal[i][i] = true;\n            }\n\n            for (let len = 2; len <= n; len++) {\n                for (let i = 0; i <= n - len; i++) {\n                    const j = i + len - 1;\n                    if (s[i] === s[j] && (len === 2 || pal[i + 1][j - 1])) {\n                        pal[i][j] = true;\n                    }\n                }\n            }\n\n            for (let i = 0; i < n; i++) {\n                if (pal[0][i]) {\n                    dp[i] = 0;\n                } else {\n                    for (let j = 0; j < i; j++) {\n                        if (pal[j + 1][i]) {\n                            dp[i] = Math.min(dp[i], dp[j] + 1);\n                        }\n                    }\n                }\n            }\n\n            return dp[n - 1];\n        }\n        "
    },
    {
        "question_id": "133",
        "title_slug": "clone-graph",
        "content": "",
        "typed_code": "\n        function cloneGraph(node) {\n            if (!node) return null;\n            const map = new Map();\n\n            function dfs(node) {\n                if (map.has(node.val)) return map.get(node.val);\n\n                const clone = new Node(node.val);\n                map.set(node.val, clone);\n                \n                for (const neighbor of node.neighbors) {\n                    clone.neighbors.push(dfs(neighbor));\n                }\n\n                return clone;\n            }\n\n            return dfs(node);\n        }\n        "
    },
    {
        "question_id": "134",
        "title_slug": "gas-station",
        "content": "",
        "typed_code": "\n        function canCompleteCircuit(gas, cost) {\n            let total_tank = 0, curr_tank = 0, starting_station = 0;\n            for (let i = 0; i < gas.length; i++) {\n                total_tank += gas[i] - cost[i];\n                curr_tank += gas[i] - cost[i];\n                if (curr_tank < 0) {\n                    starting_station = i + 1;\n                    curr_tank = 0;\n                }\n            }\n            return total_tank >= 0 ? starting_station : -1;\n        }\n        "
    },
    {
        "question_id": "135",
        "title_slug": "candy",
        "content": "",
        "typed_code": "\n        function candy(ratings) {\n            const n = ratings.length;\n            const candies = Array(n).fill(1);\n\n            for (let i = 1; i < n; i++) {\n                if (ratings[i] > ratings[i - 1]) {\n                    candies[i] = candies[i - 1] + 1;\n                }\n            }\n\n            for (let i = n - 2; i >= 0; i--) {\n                if (ratings[i] > ratings[i + 1]) {\n                    candies[i] = Math.max(candies[i], candies[i + 1] + 1);\n                }\n            }\n\n            return candies.reduce((a, b) => a + b, 0);\n        }\n        "
    }
]