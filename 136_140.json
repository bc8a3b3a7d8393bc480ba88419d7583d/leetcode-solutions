[
    {
        "question_id": "136",
        "title_slug": "single-number",
        "content": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.",
        "typed_code": "\n        function singleNumber(nums) {\n            let result = 0;\n            for (let num of nums) {\n                result ^= num;\n            }\n            return result;\n        }\n        "
    },
    {
        "question_id": "137",
        "title_slug": "single-number-ii",
        "content": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it. You must implement a solution with a linear runtime complexity and use only constant extra space.",
        "typed_code": "\n        function singleNumber(nums) {\n            let ones = 0, twos = 0;\n            for (let num of nums) {\n                ones = (ones ^ num) & ~twos;\n                twos = (twos ^ num) & ~ones;\n            }\n            return ones;\n        }\n        "
    },
    {
        "question_id": "138",
        "title_slug": "copy-list-with-random-pointer",
        "content": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list.",
        "typed_code": "\n        function copyRandomList(head) {\n            if (!head) return null;\n            let map = new Map();\n            let node = head;\n            while (node) {\n                map.set(node, new Node(node.val));\n                node = node.next;\n            }\n            node = head;\n            while (node) {\n                map.get(node).next = map.get(node.next) || null;\n                map.get(node).random = map.get(node.random) || null;\n                node = node.next;\n            }\n            return map.get(head);\n        }\n        "
    },
    {
        "question_id": "139",
        "title_slug": "word-break",
        "content": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.",
        "typed_code": "\n        function wordBreak(s, wordDict) {\n            let dp = Array(s.length + 1).fill(false);\n            dp[0] = true;\n            for (let i = 1; i <= s.length; i++) {\n                for (let word of wordDict) {\n                    if (i >= word.length && s.slice(i - word.length, i) === word) {\n                        dp[i] = dp[i] || dp[i - word.length];\n                    }\n                }\n            }\n            return dp[s.length];\n        }\n        "
    },
    {
        "question_id": "140",
        "title_slug": "word-break-ii",
        "content": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.",
        "typed_code": "\n        function wordBreak(s, wordDict) {\n            const memo = {};\n            return dfs(s);\n            \n            function dfs(s) {\n                if (s in memo) return memo[s];\n                const result = [];\n                for (let word of wordDict) {\n                    if (s.startsWith(word)) {\n                        const suffix = s.slice(word.length);\n                        if (suffix === '') result.push(word);\n                        else {\n                            const suffixWays = dfs(suffix);\n                            for (let way of suffixWays) {\n                                result.push(word + ' ' + way);\n                            }\n                        }\n                    }\n                }\n                memo[s] = result;\n                return result;\n            }\n        }\n        "
    }
]