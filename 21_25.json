[
    {
        "question_id": "21",
        "title_slug": "merge-two-sorted-lists",
        "content": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [] Output: [] Example 3: Input: list1 = [], list2 = [0] Output: [0] Constraints: The number of nodes in both lists is in the range [0, 50]. -100 <= Node.val <= 100 Both list1 and list2 are sorted in non-decreasing order.",
        "typed_code": "function mergeTwoLists(list1, list2) { let dummy = new ListNode(); let tail = dummy; while (list1 !== null && list2 !== null) { if (list1.val < list2.val) { tail.next = list1; list1 = list1.next; } else { tail.next = list2; list2 = list2.next; } tail = tail.next; } tail.next = list1 === null ? list2 : list1; return dummy.next; }"
    },
    {
        "question_id": "22",
        "title_slug": "generate-parentheses",
        "content": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. Example 1: Input: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] Example 2: Input: n = 1 Output: [\"()\"] Constraints: 1 <= n <= 8",
        "typed_code": "function generateParenthesis(n) { const result = []; function backtrack(s = '', left = 0, right = 0) { if (s.length === 2 * n) { result.push(s); return; } if (left < n) backtrack(s + '(', left + 1, right); if (right < left) backtrack(s + ')', left, right + 1); } backtrack(); return result; }"
    },
    {
        "question_id": "23",
        "title_slug": "merge-k-sorted-lists",
        "content": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1->4->5, 1->3->4, 2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists = [[]] Output: [] Constraints: k == lists.length 0 <= k <= 10^4 0 <= lists[i].length <= 500 -10^4 <= lists[i][j] <= 10^4 lists[i] is sorted in ascending order. The sum of lists[i].length will not exceed 10^4.",
        "typed_code": "function mergeKLists(lists) { const mergeTwo = (l1, l2) => { let dummy = new ListNode(); let tail = dummy; while (l1 && l2) { if (l1.val < l2.val) { tail.next = l1; l1 = l1.next; } else { tail.next = l2; l2 = l2.next; } tail = tail.next; } tail.next = l1 ? l1 : l2; return dummy.next; }; if (lists.length === 0) return null; let interval = 1; while (interval < lists.length) { for (let i = 0; i + interval < lists.length; i += interval * 2) { lists[i] = mergeTwo(lists[i], lists[i + interval]); } interval *= 2; } return lists[0]; }"
    },
    {
        "question_id": "24",
        "title_slug": "swap-nodes-in-pairs",
        "content": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.) Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] Example 2: Input: head = [] Output: [] Example 3: Input: head = [1] Output: [1] Example 4: Input: head = [1,2,3] Output: [2,1,3] Constraints: The number of nodes in the list is in the range [0, 100]. 0 <= Node.val <= 100",
        "typed_code": "function swapPairs(head) { let dummy = new ListNode(0); dummy.next = head; let prev = dummy; while (head && head.next) { let first = head; let second = head.next; prev.next = second; first.next = second.next; second.next = first; prev = first; head = first.next; } return dummy.next; }"
    },
    {
        "question_id": "25",
        "title_slug": "reverse-nodes-in-k-group",
        "content": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. You may not alter the values in the list's nodes, only nodes themselves may be changed. Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5] Example 2: Input: head = [1,2,3,4,5], k = 3 Output: [3,2,1,4,5] Constraints: The number of nodes in the list is n. 1 <= k <= n <= 5000 0 <= Node.val <= 1000 Follow-up: Can you solve the problem in O(1) extra memory space?",
        "typed_code": "function reverseKGroup(head, k) { let dummy = new ListNode(0); dummy.next = head; let prevGroupEnd = dummy; while (true) { let groupStart = prevGroupEnd.next; let groupEnd = prevGroupEnd; for (let i = 0; i < k; i++) { groupEnd = groupEnd.next; if (!groupEnd) return dummy.next; } let nextGroupStart = groupEnd.next; let [reversedStart, reversedEnd] = reverseList(groupStart, groupEnd); prevGroupEnd.next = reversedStart; reversedEnd.next = nextGroupStart; prevGroupEnd = reversedEnd; } function reverseList(start, end) { let prev = end.next; let curr = start; let first = start; while (prev !== end) { let next = curr.next; curr.next = prev; prev = curr; curr = next; } return [end, first]; } }"
    }
]