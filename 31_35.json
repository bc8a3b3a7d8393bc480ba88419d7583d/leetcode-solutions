[
    {
        "question_id": "31",
        "title_slug": "next-permutation",
        "content": "Given an array of integers nums, find the next permutation of nums.",
        "typed_code": "function nextPermutation(nums) {\n            let i = nums.length - 2;\n            while (i >= 0 && nums[i] >= nums[i + 1]) {\n                i--;\n            }\n            if (i >= 0) {\n                let j = nums.length - 1;\n                while (j >= 0 && nums[j] <= nums[i]) {\n                    j--;\n                }\n                [nums[i], nums[j]] = [nums[j], nums[i]];\n            }\n            nums = nums.slice(0, i + 1).concat(nums.slice(i + 1).reverse());\n        }"
    },
    {
        "question_id": "32",
        "title_slug": "longest-valid-parentheses",
        "content": "Given a string containing just the characters '(' and ')', return the length of the longest valid parentheses substring.",
        "typed_code": "function longestValidParentheses(s) {\n            let maxLen = 0;\n            let stack = [-1];\n            for (let i = 0; i < s.length; i++) {\n                if (s[i] === '(') {\n                    stack.push(i);\n                } else {\n                    stack.pop();\n                    if (stack.length === 0) {\n                        stack.push(i);\n                    } else {\n                        maxLen = Math.max(maxLen, i - stack[stack.length - 1]);\n                    }\n                }\n            }\n            return maxLen;\n        }"
    },
    {
        "question_id": "33",
        "title_slug": "search-in-rotated-sorted-array",
        "content": "Given a sorted array of distinct integers nums rotated at an unknown pivot, return the index of target or -1 if not found.",
        "typed_code": "function search(nums, target) {\n            let left = 0, right = nums.length - 1;\n            while (left <= right) {\n                let mid = Math.floor((left + right) / 2);\n                if (nums[mid] === target) return mid;\n                if (nums[left] <= nums[mid]) {\n                    if (target >= nums[left] && target < nums[mid]) right = mid - 1;\n                    else left = mid + 1;\n                } else {\n                    if (target > nums[mid] && target <= nums[right]) left = mid + 1;\n                    else right = mid - 1;\n                }\n            }\n            return -1;\n        }"
    },
    {
        "question_id": "34",
        "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
        "content": "Given a sorted array of integers nums, find the starting and ending position of a given target value.",
        "typed_code": "function searchRange(nums, target) {\n            function findBound(isFirst) {\n                let left = 0, right = nums.length - 1;\n                while (left <= right) {\n                    let mid = Math.floor((left + right) / 2);\n                    if (nums[mid] === target) {\n                        if (isFirst) {\n                            if (mid === left || nums[mid - 1] !== target) return mid;\n                            right = mid - 1;\n                        } else {\n                            if (mid === right || nums[mid + 1] !== target) return mid;\n                            left = mid + 1;\n                        }\n                    } else if (nums[mid] < target) {\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                return -1;\n            }\n            return [findBound(true), findBound(false)];\n        }"
    },
    {
        "question_id": "35",
        "title_slug": "search-insert-position",
        "content": "Given a sorted array of distinct integers and a target value, return the index where target should be inserted.",
        "typed_code": "function searchInsert(nums, target) {\n            let left = 0, right = nums.length - 1;\n            while (left <= right) {\n                let mid = Math.floor((left + right) / 2);\n                if (nums[mid] === target) return mid;\n                if (nums[mid] < target) left = mid + 1;\n                else right = mid - 1;\n            }\n            return left;\n        }"
    }
]