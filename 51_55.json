[{"questionId": "51", "titleSlug": "n-queens", "content": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order. Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.", "typed_code": "\n        var solveNQueens = function(n) {\n            const res = [];\n            const board = Array.from({ length: n }, () => \".\".repeat(n));\n            \n            const isValid = (board, row, col) => {\n                for (let i = 0; i < row; i++) {\n                    if (board[i][col] === 'Q') return false;\n                    if (col - (row - i) >= 0 && board[i][col - (row - i)] === 'Q') return false;\n                    if (col + (row - i) < n && board[i][col + (row - i)] === 'Q') return false;\n                }\n                return true;\n            };\n            \n            const backtrack = (row) => {\n                if (row === n) {\n                    res.push(board.map(r => r.join('')));\n                    return;\n                }\n                for (let col = 0; col < n; col++) {\n                    if (!isValid(board, row, col)) continue;\n                    board[row] = board[row].split('');\n                    board[row][col] = 'Q';\n                    backtrack(row + 1);\n                    board[row][col] = '.';\n                }\n            };\n            \n            backtrack(0);\n            return res;\n        };\n        "}, {"questionId": "52", "titleSlug": "n-queens-ii", "content": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. Given an integer n, return the number of distinct solutions to the n-queens puzzle.", "typed_code": "\n        var totalNQueens = function(n) {\n            let count = 0;\n            const board = Array.from({ length: n }, () => \".\".repeat(n));\n            \n            const isValid = (board, row, col) => {\n                for (let i = 0; i < row; i++) {\n                    if (board[i][col] === 'Q') return false;\n                    if (col - (row - i) >= 0 && board[i][col - (row - i)] === 'Q') return false;\n                    if (col + (row - i) < n && board[i][col + (row - i)] === 'Q') return false;\n                }\n                return true;\n            };\n            \n            const backtrack = (row) => {\n                if (row === n) {\n                    count++;\n                    return;\n                }\n                for (let col = 0; col < n; col++) {\n                    if (!isValid(board, row, col)) continue;\n                    board[row] = board[row].split('');\n                    board[row][col] = 'Q';\n                    backtrack(row + 1);\n                    board[row][col] = '.';\n                }\n            };\n            \n            backtrack(0);\n            return count;\n        };\n        "}, {"questionId": "53", "titleSlug": "maximum-subarray", "content": "Given an integer array nums, find the subarray with the largest sum, and return its sum.", "typed_code": "\n        var maxSubArray = function(nums) {\n            let maxSoFar = nums[0];\n            let currentMax = nums[0];\n            \n            for (let i = 1; i < nums.length; i++) {\n                currentMax = Math.max(nums[i], currentMax + nums[i]);\n                maxSoFar = Math.max(maxSoFar, currentMax);\n            }\n            \n            return maxSoFar;\n        };\n        "}, {"questionId": "54", "titleSlug": "spiral-matrix", "content": "Given an m x n matrix, return all elements of the matrix in spiral order.", "typed_code": "\n        var spiralOrder = function(matrix) {\n            const res = [];\n            let left = 0, right = matrix[0].length - 1, top = 0, bottom = matrix.length - 1;\n            \n            while (left <= right && top <= bottom) {\n                for (let i = left; i <= right; i++) res.push(matrix[top][i]);\n                top++;\n                for (let i = top; i <= bottom; i++) res.push(matrix[i][right]);\n                right--;\n                if (top <= bottom) {\n                    for (let i = right; i >= left; i--) res.push(matrix[bottom][i]);\n                    bottom--;\n                }\n                if (left <= right) {\n                    for (let i = bottom; i >= top; i--) res.push(matrix[i][left]);\n                    left++;\n                }\n            }\n            \n            return res;\n        };\n        "}, {"questionId": "55", "titleSlug": "jump-game", "content": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.", "typed_code": "\n        var canJump = function(nums) {\n            let lastGoodIndex = nums.length - 1;\n            \n            for (let i = nums.length - 2; i >= 0; i--) {\n                if (i + nums[i] >= lastGoodIndex) {\n                    lastGoodIndex = i;\n                }\n            }\n            \n            return lastGoodIndex === 0;\n        };\n        "}]