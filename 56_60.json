[{"questionId": "56", "titleSlug": "merge-intervals", "content": "Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.", "typed_code": "\nfunction merge(intervals) {\n    if (intervals.length === 0) return [];\n    intervals.sort((a, b) => a[0] - b[0]);\n    let result = [intervals[0]];\n    \n    for (let i = 1; i < intervals.length; i++) {\n        let prev = result[result.length - 1];\n        let curr = intervals[i];\n        if (prev[1] >= curr[0]) {\n            prev[1] = Math.max(prev[1], curr[1]);\n        } else {\n            result.push(curr);\n        }\n    }\n    return result;\n}\n"}, {"questionId": "57", "titleSlug": "insert-interval", "content": "You are given an array of non-overlapping intervals where intervals[i] = [start_i, end_i] and sorted in ascending order. You are also given a new interval that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted and non-overlapping.", "typed_code": "\nfunction insert(intervals, newInterval) {\n    let result = [];\n    let i = 0;\n\n    while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n        result.push(intervals[i]);\n        i++;\n    }\n    \n    while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n        newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n        newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n        i++;\n    }\n    \n    result.push(newInterval);\n    \n    while (i < intervals.length) {\n        result.push(intervals[i]);\n        i++;\n    }\n    \n    return result;\n}\n"}, {"questionId": "58", "titleSlug": "length-of-last-word", "content": "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.", "typed_code": "\nfunction lengthOfLastWord(s) {\n    return s.trim().split(' ').pop().length;\n}\n"}, {"questionId": "59", "titleSlug": "spiral-matrix-ii", "content": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order.", "typed_code": "\nfunction generateMatrix(n) {\n    let matrix = Array.from({ length: n }, () => Array(n).fill(0));\n    let num = 1, left = 0, right = n - 1, top = 0, bottom = n - 1;\n\n    while (left <= right && top <= bottom) {\n        for (let i = left; i <= right; i++) matrix[top][i] = num++;\n        top++;\n        \n        for (let i = top; i <= bottom; i++) matrix[i][right] = num++;\n        right--;\n        \n        for (let i = right; i >= left; i--) matrix[bottom][i] = num++;\n        bottom--;\n        \n        for (let i = bottom; i >= top; i--) matrix[i][left] = num++;\n        left++;\n    }\n\n    return matrix;\n}\n"}, {"questionId": "60", "titleSlug": "permutation-sequence", "content": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations. Given n and k, return the k-th permutation sequence.", "typed_code": "\nfunction getPermutation(n, k) {\n    let factorial = [1];\n    let nums = [];\n    \n    for (let i = 1; i <= n; i++) {\n        factorial[i] = factorial[i - 1] * i;\n        nums.push(i);\n    }\n    \n    k--;\n    let result = '';\n    \n    for (let i = n; i > 0; i--) {\n        let index = Math.floor(k / factorial[i - 1]);\n        result += nums[index];\n        nums.splice(index, 1);\n        k %= factorial[i - 1];\n    }\n    \n    return result;\n}\n"}]