[{"question_id": "66", "title_slug": "plus-one", "content": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's. Increment the large integer by one and return the resulting array of digits.", "typed_code": "function plusOne(digits) {\n    for (let i = digits.length - 1; i >= 0; i--) {\n        if (digits[i] < 9) {\n            digits[i]++;\n            return digits;\n        }\n        digits[i] = 0;\n    }\n    digits.unshift(1);\n    return digits;\n}"}, {"question_id": "67", "title_slug": "add-binary", "content": "Given two binary strings a and b, return their sum as a binary string.", "typed_code": "function addBinary(a, b) {\n    let carry = 0;\n    let result = '';\n    let i = a.length - 1, j = b.length - 1;\n    \n    while (i >= 0 || j >= 0 || carry) {\n        let sum = carry;\n        if (i >= 0) sum += parseInt(a[i--]);\n        if (j >= 0) sum += parseInt(b[j--]);\n        \n        result = (sum % 2) + result;\n        carry = Math.floor(sum / 2);\n    }\n    \n    return result;\n}"}, {"question_id": "68", "title_slug": "text-justification", "content": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.", "typed_code": "function fullJustify(words, maxWidth) {\n    let result = [];\n    let line = [];\n    let lineLen = 0;\n    \n    for (let word of words) {\n        if (lineLen + word.length + line.length > maxWidth) {\n            for (let i = 0; i < maxWidth - lineLen; i++) {\n                line[i % (line.length - 1 || 1)] += ' ';\n            }\n            result.push(line.join(''));\n            line = [];\n            lineLen = 0;\n        }\n        line.push(word);\n        lineLen += word.length;\n    }\n    result.push(line.join(' ') + ' '.repeat(maxWidth - lineLen - (line.length - 1)));\n    return result;\n}"}, {"question_id": "69", "title_slug": "sqrtx", "content": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer.", "typed_code": "function mySqrt(x) {\n    if (x === 0) return 0;\n    let left = 1, right = x;\n    \n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (mid * mid === x) return mid;\n        if (mid * mid < x) left = mid + 1;\n        else right = mid - 1;\n    }\n    \n    return right;\n}"}, {"question_id": "70", "title_slug": "climbing-stairs", "content": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?", "typed_code": "function climbStairs(n) {\n    if (n === 1) return 1;\n    let first = 1, second = 2;\n    for (let i = 3; i <= n; i++) {\n        let third = first + second;\n        first = second;\n        second = third;\n    }\n    return second;\n}"}]