[{"question_id": "71", "title_slug": "simplify-path", "content": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path. The rules of a Unix-style file system are as follows: A single period '.' represents the current directory. A double period '..' represents the previous/parent directory. Multiple consecutive slashes such as '//' and '///' are treated as a single slash '/'. Any sequence of periods that does not match the rules above should be treated as a valid directory or file name. The simplified canonical path should follow these rules: The path must start with a single slash '/'. Directories within the path must be separated by exactly one slash '/'. The path must not end with a slash '/', unless it is the root directory. The path must not have any single or double periods ('.' and '..') used to denote current or parent directories. Return the simplified canonical path.", "typed_code": "function simplifyPath(path) {\n    const parts = path.split('/');\n    const stack = [];\n    \n    for (const part of parts) {\n        if (part === '' || part === '.') continue;\n        if (part === '..') {\n            if (stack.length > 0) stack.pop();\n        } else {\n            stack.push(part);\n        }\n    }\n    \n    return '/' + stack.join('/');\n}"}, {"question_id": "72", "title_slug": "edit-distance", "content": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character, Delete a character, Replace a character.", "typed_code": "function minDistance(word1, word2) {\n    const m = word1.length, n = word2.length;\n    const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));\n\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (word1[i - 1] === word2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"}, {"question_id": "73", "title_slug": "set-matrix-zeroes", "content": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. You must do it in place.", "typed_code": "function setZeroes(matrix) {\n    const rows = matrix.length;\n    const cols = matrix[0].length;\n    let rowZero = false, colZero = false;\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (matrix[i][j] === 0) {\n                matrix[0][j] = 0;\n                matrix[i][0] = 0;\n                if (i === 0) rowZero = true;\n                if (j === 0) colZero = true;\n            }\n        }\n    }\n\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            if (matrix[i][0] === 0 || matrix[0][j] === 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n\n    if (rowZero) for (let j = 0; j < cols; j++) matrix[0][j] = 0;\n    if (colZero) for (let i = 0; i < rows; i++) matrix[i][0] = 0;\n}"}, {"question_id": "74", "title_slug": "search-a-2d-matrix", "content": "You are given an m x n integer matrix matrix with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer target, return true if target is in matrix or false otherwise.", "typed_code": "function searchMatrix(matrix, target) {\n    const m = matrix.length, n = matrix[0].length;\n    let left = 0, right = m * n - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        const midValue = matrix[Math.floor(mid / n)][mid % n];\n        \n        if (midValue === target) return true;\n        if (midValue < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    \n    return false;\n}"}, {"question_id": "75", "title_slug": "sort-colors", "content": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. You must solve this problem without using the library's sort function.", "typed_code": "function sortColors(nums) {\n    let low = 0, high = nums.length - 1, mid = 0;\n    \n    while (mid <= high) {\n        if (nums[mid] === 0) {\n            [nums[low], nums[mid]] = [nums[mid], nums[low]];\n            low++;\n            mid++;\n        } else if (nums[mid] === 1) {\n            mid++;\n        } else {\n            [nums[mid], nums[high]] = [nums[high], nums[mid]];\n            high--;\n        }\n    }\n}"}]