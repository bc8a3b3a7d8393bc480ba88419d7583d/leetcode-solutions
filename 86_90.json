[{"question_id": "86", "title_slug": "partition-list", "typed_code": "\"\\nfunction partition(head, x) {\\n    let before = new ListNode(0);\\n    let after = new ListNode(0);\\n    let beforeHead = before, afterHead = after;\\n    \\n    while (head) {\\n        if (head.val < x) {\\n            before.next = head;\\n            before = before.next;\\n        } else {\\n            after.next = head;\\n            after = after.next;\\n        }\\n        head = head.next;\\n    }\\n    \\n    after.next = null;\\n    before.next = afterHead.next;\\n    \\n    return beforeHead.next;\\n}\\n        \""}, {"question_id": "87", "title_slug": "scramble-string", "typed_code": "\"\\nfunction isScramble(s1, s2) {\\n    if (s1 === s2) return true;\\n    if (s1.length !== s2.length) return false;\\n\\n    const key = s1 + '-' + s2;\\n    const memo = new Map();\\n\\n    if (memo.has(key)) return memo.get(key);\\n\\n    let n = s1.length;\\n    let count = new Array(26).fill(0);\\n\\n    for (let i = 0; i < n; i++) {\\n        count[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\\n        count[s2.charCodeAt(i) - 'a'.charCodeAt(0)]--;\\n    }\\n\\n    if (count.some(v => v !== 0)) return false;\\n\\n    for (let i = 1; i < n; i++) {\\n        if (isScramble(s1.slice(0, i), s2.slice(0, i)) && isScramble(s1.slice(i), s2.slice(i))) return true;\\n        if (isScramble(s1.slice(0, i), s2.slice(n - i)) && isScramble(s1.slice(i), s2.slice(0, n - i))) return true;\\n    }\\n\\n    memo.set(key, false);\\n    return false;\\n}\\n        \""}, {"question_id": "88", "title_slug": "merge-sorted-array", "typed_code": "\"\\nfunction merge(nums1, m, nums2, n) {\\n    let i = m - 1;\\n    let j = n - 1;\\n    let k = m + n - 1;\\n\\n    while (j >= 0) {\\n        if (i >= 0 && nums1[i] > nums2[j]) {\\n            nums1[k--] = nums1[i--];\\n        } else {\\n            nums1[k--] = nums2[j--];\\n        }\\n    }\\n}\\n        \""}, {"question_id": "89", "title_slug": "gray-code", "typed_code": "\"\\nfunction grayCode(n) {\\n    let result = [];\\n    for (let i = 0; i < 1 << n; i++) {\\n        result.push(i ^ (i >> 1));\\n    }\\n    return result;\\n}\\n        \""}, {"question_id": "90", "title_slug": "subsets-ii", "typed_code": "\"\\nfunction subsetsWithDup(nums) {\\n    nums.sort((a, b) => a - b);\\n    let result = [];\\n    \\n    function backtrack(start, path) {\\n        result.push([...path]);\\n        for (let i = start; i < nums.length; i++) {\\n            if (i > start && nums[i] === nums[i - 1]) continue;\\n            path.push(nums[i]);\\n            backtrack(i + 1, path);\\n            path.pop();\\n        }\\n    }\\n    \\n    backtrack(0, []);\\n    return result;\\n}\\n        \""}]